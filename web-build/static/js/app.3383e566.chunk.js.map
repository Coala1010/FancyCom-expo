{"version":3,"sources":["components/TaskCard/style.ts","components/TaskCard/index.tsx","storybook/stories/Welcome/index.js","storybook/stories/CenterView/style.js","storybook/stories/CenterView/index.js","storybook/stories/Button/index.js","App.tsx","storybook/index.js","components/Selector/style.ts","components/Selector/index.tsx","components/FlexTabs/style.ts","components/FlexTabs/index.tsx","components/SlugField/style.ts","components/SlugField/index.tsx","components/ToolBar/style.ts","components/ToolBar/index.tsx","components/Timeline/style.ts","components/Timeline/index.tsx","web-build/register-service-worker.js","storybook/rn-addons.js","storybook/stories/Fancy/Selector.stories.js","storybook/stories/Fancy/FlexTabs.stories.js","storybook/stories/Fancy/SlugField.stories.js","storybook/stories/Fancy/ToolBar.stories.js","components/ToolBar/ambid_logo.png","components/ToolBar/ambid_user.png","storybook/stories/Fancy/Timeline.stories.js","storybook/stories/Fancy/TaskCard.stories.js","storybook/stories/Button/Button.stories.js","storybook/stories/Welcome/Welcome.stories.js","storybook/stories/index.js"],"names":["StyleSheet","create","screen","backgroundColor","marginTop","Platform","OS","StatusBar","currentHeight","container","flexDirection","marginHorizontal","leftBar","flex","width","taskCard","padding","justifyContent","alignItems","borderColor","borderTopWidth","borderBottomWidth","borderRightWidth","textSection","titleText","color","fontWeight","fontSize","contentText","buttonSection","borderRadius","buttonText","TaskCard","props","icon","title","message","href","buttonIsVisible","buttonHref","buttonLabel","buttonComponent","View","style","styles","TouchableOpacity","onPress","Linking","openURL","disabled","MaterialCommunityIcons","name","size","Text","defaultProps","Welcome","wrapper","header","marginBottom","content","lineHeight","showApp","event","preventDefault","this","React","Component","propTypes","PropTypes","func","main","CenterView","children","node","Button","storybook","configure","require","module","StorybookUIRoot","getStorybookUI","asyncStorage","AppRegistry","registerComponent","paddingTop","alignItemContainer","paddingHorizontal","paddingVertical","alignItemSection","alignIconSection","height","borderWidth","Selector","useState","value","setValue","items","onChange","ScrollView","showsHorizontalScrollIndicator","horizontal","map","item","index","key","id","label","borderBottomColor","borderTopColor","marginVertical","tabBtn","centeredView","modalView","margin","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","openButton","textStyle","textAlign","exampleData","Array","d","Math","floor","random","FlexTabs","tabs","enableTabDropdowns","tabActions","enableContextMenu","canRename","canDrag","canAdd","overflow","componentWrapper","tabComponent","vertical","tabsData","setTabsData","nSelItem","setNSelItem","modalVisible","setModalVisible","editModalVisible","setEditModalVisible","tabTitle","setTabTitle","bEditOrAdd","setEditOrAdd","guidGenerator","S4","toString","substring","renderContextModal","Modal","transparent","visible","onRequestClose","TouchableHighlight","setTimeout","tmpTabsData","tmp","push","length","indexOf","splice","alert","renderEditTabTitle","TextInput","onChangeText","text","placeholder","maxLength","i","data","keyExtractor","renderItem","drag","isActive","onLongPress","Entypo","marginLeft","onDragEnd","FlatList","contentContainerStyle","alignSelf","domainHeaderSection","paddingRight","borderTopLeftRadius","borderBottomLeftRadius","domainPrefixColor","domainPrefixSection","flexWrap","slashSection","slugTextSection","borderTopRightRadius","borderBottomRightRadius","buttonsSection","SlugField","domainPrefix","domainPrefixItems","showPrefixDropdown","showCopyButton","showLinkIcon","slugText","setSlugText","domainPrefixText","setDomainPrefixText","modalizeRef","useRef","modalToggle","defaultValue","containerStyle","labelStyle","dropDownStyle","arrowColor","onChangeItem","current","open","numberOfLines","placeholderTextColor","autoCapitalize","urlValue","Clipboard","setString","ToastAndroid","show","SHORT","Alert","Feather","ref","adjustToContentHeight","close","scrollViewWrapper","leftItemsSection","logoImg","toolbarTitleText","rightItemsSection","publishBtn","publishBtnText","userAvatarPart","userAvatarImg","rightItemElement","closeButton","modalTitle","modalEdiTitleInput","ToolBar","leftItems","rightItems","titleModalVisible","setTitleModalVisible","setTitleText","renderTitleEditModal","animationType","Image","source","resizeMode","barSection","iconCircle","timelineBar","descriptionSection","dateText","textPart","Timeline","type","barColor","barStyle","lineColor","lineStyle","date","subTitle","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","selectorArray","storiesOf","add","log","notes","onSelect","exports","timelineArray","titleStyle","subTitleStyle","dateStart","dateEnd","iconStyle","contentStyle","tooltip","cardContainer","zIndex","addDecorator","getStory","action","linkTo","withBackgrounds","addParameters","backgrounds","default"],"mappings":"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","file":"static/js/app.3383e566.chunk.js","sourcesContent":["import { StyleSheet, Platform, StatusBar } from 'react-native';\n\nexport default StyleSheet.create({\n  screen: {\n    backgroundColor: 'white',\n    marginTop: Platform.OS === 'android' ? StatusBar.currentHeight : 15,\n  },\n  container: {\n    flexDirection: 'row',\n    marginHorizontal: 15,\n  },\n  leftBar: {\n    flex: 1,\n    width: 5,\n    backgroundColor: '#81BC7E', \n  },\n  taskCard: {\n    width: '100%',\n    padding: 10,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#EBF0F4',\n    borderTopWidth: 2,\n    borderBottomWidth: 2,\n    borderRightWidth: 2,\n    // backgroundColor: 'red',\n  },\n  textSection: {\n    flex: 1,\n    flexDirection: 'column',\n    marginHorizontal: 10,\n  },\n  titleText: {\n    color: '#425867',\n    fontWeight: 'bold',\n    fontSize: 14\n  },\n  contentText: {\n    color: '#4F6272',\n    fontWeight: '500',\n    fontSize: 12,\n    marginTop: 5,\n  },\n  buttonSection: {\n    backgroundColor: '#81BC7E',\n    padding: 5,\n    borderRadius: 5,\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '500',\n    fontSize: 12,\n  },\n});","import React from 'react';\nimport { Linking, Text, View, TouchableOpacity } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport styles from './style';\n\nexport interface TaskCardProps {\n  icon?: string;\n  title?: string;\n  message?: string;\n  color?: string;\n  href?: string;\n  buttonIsVisible?: boolean;\n  buttonHref?: string;\n  buttonLabel?: string;\n  buttonComponent: object;\n}\n\nexport function TaskCard(props: TaskCardProps) {\n  const {\n    icon,\n    title,\n    message,\n    color,\n    href,\n    buttonIsVisible,\n    buttonHref,\n    buttonLabel,\n    buttonComponent\n  } = props;\n\n  const renderTaskCard = () => {\n    return (\n      <TouchableOpacity\n        onPress={() => Linking.openURL(href)}\n        disabled={href == null}\n        style={styles.container}>\n        <View>\n          <View style={[styles.leftBar, { backgroundColor: color }]} />\n        </View>\n        <View style={styles.taskCard}>\n          <MaterialCommunityIcons name={icon} size={25} color={color} />\n          <View style={styles.textSection}>\n            <Text style={styles.titleText}>{title}</Text>\n            <Text style={styles.contentText}>{message}</Text>\n          </View>\n          {buttonIsVisible && buttonComponent == null ? (\n            <TouchableOpacity\n              onPress={() => Linking.openURL(buttonHref)}\n              disabled={buttonHref == null}\n              style={[styles.buttonSection, { backgroundColor: color }]}>\n              <Text style={styles.buttonText}>{buttonLabel}</Text>\n            </TouchableOpacity>\n          ) : (\n            buttonComponent\n          )}\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  return <View style={styles.screen}>{renderTaskCard()}</View>;\n}\n\nTaskCard.defaultProps = {\n  color: '#81BC7E',\n  icon: 'check-circle',\n  buttonLabel: 'Button'\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text } from 'react-native';\n\nexport default class Welcome extends React.Component {\n  styles = {\n    wrapper: {\n      flex: 1,\n      padding: 24,\n      justifyContent: 'center',\n    },\n    header: {\n      fontSize: 18,\n      marginBottom: 18,\n    },\n    content: {\n      fontSize: 12,\n      marginBottom: 10,\n      lineHeight: 18,\n    },\n  };\n\n  showApp = (event) => {\n    const { showApp } = this.props;\n    event.preventDefault();\n\n    if (showApp) {\n      showApp();\n    }\n  };\n\n  render() {\n    return (\n      <View style={this.styles.wrapper}>\n        <Text style={this.styles.header}>Welcome to React Native Storybook</Text>\n        <Text style={this.styles.content}>\n          This is a UI Component development environment for your React Native app. Here you can\n          display and interact with your UI components as stories. A story is a single state of one\n          or more UI components. You can have as many stories as you want. In other words a story is\n          like a visual test case.\n        </Text>\n        <Text style={this.styles.content}>\n          We have added some stories inside the \"storybook/stories\" directory for examples. Try\n          editing the \"storybook/stories/Welcome.js\" file to edit this message.\n        </Text>\n      </View>\n    );\n  }\n}\n\nWelcome.defaultProps = {\n  showApp: null,\n};\n\nWelcome.propTypes = {\n  showApp: PropTypes.func,\n};\n","export default {\n  main: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { View } from 'react-native';\nimport style from './style';\n\nexport default function CenterView({ children }) {\n  return <View style={style.main}>{children}</View>;\n}\n\nCenterView.defaultProps = {\n  children: null,\n};\n\nCenterView.propTypes = {\n  children: PropTypes.node,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity } from 'react-native';\n\nexport default function Button({ onPress, children }) {\n  return <TouchableOpacity onPress={onPress}>{children}</TouchableOpacity>;\n}\n\nButton.defaultProps = {\n  children: null,\n  onPress: () => {},\n};\n\nButton.propTypes = {\n  children: PropTypes.node,\n  onPress: PropTypes.func,\n};\n","// import { StatusBar } from 'expo-status-bar';\n// import React from 'react';\n// import { SafeAreaProvider } from 'react-native-safe-area-context';\n\n// import useCachedResources from './hooks/useCachedResources';\n// import useColorScheme from './hooks/useColorScheme';\n// import Navigation from './navigation';\n\n// export default function App() {\n//   const isLoadingComplete = useCachedResources();\n//   const colorScheme = useColorScheme();\n\n//   if (!isLoadingComplete) {\n//     return null;\n//   } else {\n//     return (\n//       <SafeAreaProvider>\n//         <Navigation colorScheme={colorScheme} />\n//         <StatusBar />\n//       </SafeAreaProvider>\n//     );\n//   }\n// }\n\nimport storybook from './storybook';\n\nexport default storybook;\n","import { AppRegistry } from 'react-native';\nimport { getStorybookUI, configure } from '@storybook/react-native';\n\nimport './rn-addons';\n\n// import stories\nconfigure(() => {\n  require('./stories');\n}, module);\n\n// Refer to https://github.com/storybookjs/storybook/tree/master/app/react-native#start-command-parameters\n// To find allowed options for getStorybookUI\n// const StorybookUIRoot = getStorybookUI({});\nconst StorybookUIRoot = getStorybookUI({ asyncStorage: false });\n\n// If you are using React Native vanilla and after installation you don't see your app name here, write it manually.\n// If you use Expo you can safely remove this line.\nAppRegistry.registerComponent('%APP_NAME%', () => StorybookUIRoot);\n\nexport default StorybookUIRoot;\n","import { StyleSheet, Platform, StatusBar } from 'react-native';\n\nexport default StyleSheet.create({\n  screen: {\n    flex: 1,\n    backgroundColor: 'white',\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n  },\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  alignItemContainer: {\n    paddingHorizontal: 5,\n    paddingVertical: 10,\n  },\n  alignItemSection: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  alignIconSection: {\n    width: 60,\n    height: 60,\n    borderWidth: 2,\n    borderColor: '#DCDCDC',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginHorizontal: 5,\n  },\n});","import React, { useState } from 'react';\nimport { ScrollView, Text, TouchableOpacity, View, ViewStyle } from 'react-native';\n\nimport styles from './style';\n\ninterface ItemProps {\n  id: string;\n  label: string;\n  icon: object;\n}\n\nexport interface SelectorProps {\n  items: ItemProps[];\n  onChange: () => void;\n  style?: ViewStyle;\n}\n\nexport function Selector(props: SelectorProps) {\n  const [value, setValue] = useState(0);\n  const { items, style, onChange } = props;\n\n  return (\n    <View style={styles.screen}>\n      <View style={[styles.container, style]}>\n        <ScrollView showsHorizontalScrollIndicator={false} horizontal>\n          {items &&\n            items.map((item, index) => (\n              <TouchableOpacity\n                onPress={() => {\n                  setValue(index);\n                  onChange();\n                }}\n                key={item.id}\n                style={[\n                  styles.alignItemContainer,\n                  { backgroundColor: value === index ? '#F4F4F4' : 'white' }\n                ]}>\n                <View style={styles.alignItemSection}>\n                  <View style={styles.alignIconSection}>{item.icon}</View>\n                  <Text style={{ color: 'black', fontSize: 12, marginTop: 5 }}>{item.label}</Text>\n                </View>\n              </TouchableOpacity>\n            ))}\n        </ScrollView>\n      </View>\n    </View>\n  );\n}\n\nSelector.defaultProps = {};\n","import { StyleSheet, Platform, StatusBar } from 'react-native';\n\nexport default StyleSheet.create({\n  screen: {\n    flex: 1,\n    backgroundColor: 'white',\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,\n  },\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderBottomColor: 'grey',\n    borderBottomWidth: 1,\n    borderTopColor: 'grey',\n    borderTopWidth: 1,\n    marginVertical: 5,\n    width: '100%',\n  },\n  tabBtn: {\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    // height: 40,\n    marginHorizontal: 10,\n    borderBottomWidth: 2,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22,\n    marginHorizontal: 30,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n    width: '100%',\n  },\n  openButton: {\n    backgroundColor: \"#2196F3\",\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    width: '100%',\n    marginVertical: 5,\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n});","import React, { useState } from 'react';\nimport {\n  Alert,\n  Modal,\n  Platform,\n  Text,\n  TextInput,\n  View,\n  TouchableOpacity,\n  TouchableHighlight,\n  ViewStyle,\n  FlatList,\n  Animated\n} from 'react-native';\nimport DraggableFlatList from 'react-native-draggable-flatlist';\nimport { Entypo } from '@expo/vector-icons';\nimport styles from './style';\n\nconst exampleData = [...Array(10)].map((d, index) => ({\n  key: `item-${index}`, // For example only -- don't use index as your key!\n  name: index,\n  backgroundColor: `rgb(${Math.floor(Math.random() * 255)}, ${index * 5}, ${132})`\n}));\n\ninterface TabProps {\n  id: string;\n  name: string;\n}\n\ninterface TabActionProps {\n  label: string;\n  onSelect: object;\n}\n\nexport interface FlexTabsProps {\n  name?: string;\n  tabs?: TabProps[];\n  enableTabDropdowns?: boolean;\n  enableContextMenu?: string;\n  tabActions?: TabActionProps[];\n  canRename?: boolean;\n  canDrag?: boolean;\n  overflow?: string;\n  canAdd: boolean;\n  componentWrapper: object;\n  style: ViewStyle;\n  tabComponent: object;\n  vertical: boolean;\n}\n\nexport function FlexTabs(props: FlexTabsProps) {\n  const {\n    name,\n    tabs,\n    enableTabDropdowns,\n    enableContextMenu,\n    tabActions,\n    canRename,\n    canDrag,\n    overflow,\n    canAdd,\n    componentWrapper,\n    style,\n    tabComponent,\n    vertical\n  } = props;\n\n  const [tabsData, setTabsData] = useState(tabs);\n  const [nSelItem, setNSelItem] = useState(tabs[0].id);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [editModalVisible, setEditModalVisible] = useState(false);\n  const [tabTitle, setTabTitle] = useState('');\n  const [bEditOrAdd, setEditOrAdd] = useState(false);\n  const [testData, setTestData] = useState(exampleData);\n\n  const guidGenerator = () => {\n    var S4 = function () {\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    };\n    return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();\n  };\n\n  const renderContextModal = (\n    <Modal\n      // animationType=\"fade\"\n      transparent\n      visible={modalVisible}\n      onRequestClose={() => {}}>\n      <View style={styles.centeredView}>\n        <View style={styles.modalView}>\n          {tabActions &&\n            tabActions.map((item, index) => (\n              <TouchableHighlight\n                key={index.toString()}\n                style={styles.openButton}\n                onPress={() => {\n                  setModalVisible(!modalVisible);\n                  if (item.label === 'Rename') {\n                    if (canRename) {\n                      setTimeout(() => {\n                        // item.onSelect();\n                        setEditOrAdd(false);\n                        setEditModalVisible(true);\n                      }, 1000);\n                    }\n                  } else if (item.label === 'Duplicate') {\n                    let tmpTabsData = tabsData;\n                    var tmp = { id: guidGenerator(), name: nSelItem.name };\n                    tmpTabsData.push(tmp);\n                    setTabsData(tmpTabsData);\n                  } else if (item.label === 'Delete') {\n                    let tmpTabsData = tabsData;\n                    if (tmpTabsData.length > 1) {\n                      var index = tmpTabsData.indexOf(nSelItem);\n                      tmpTabsData.splice(index, 1);\n                      setNSelItem(tmpTabsData[0]);\n                      setTabsData(tmpTabsData);\n                    } else {\n                      alert('You can remove the last menu');\n                    }\n                  }\n                }}>\n                <Text style={styles.textStyle}>{item.label}</Text>\n              </TouchableHighlight>\n            ))}\n        </View>\n      </View>\n    </Modal>\n  );\n\n  const renderEditTabTitle = (\n    <Modal\n      // animationType=\"slide\"\n      transparent\n      visible={editModalVisible}\n      onRequestClose={() => {}}>\n      <View style={styles.centeredView}>\n        <View style={styles.modalView}>\n          <Text style={{ marginVertical: 10, fontSize: 20, fontWeight: 'bold' }}>Tab Title</Text>\n          <TextInput\n            style={{\n              width: '100%',\n              height: 40,\n              borderColor: 'grey',\n              borderWidth: 1,\n              paddingHorizontal: 10,\n              borderRadius: 10\n            }}\n            onChangeText={(text) => setTabTitle(text)}\n            value={tabTitle}\n            placeholder='Tab Title'\n            maxLength={30}\n          />\n          <TouchableHighlight\n            style={styles.openButton}\n            onPress={() => {\n              let tmpTabsData = tabsData;\n              if (tabTitle !== '') {\n                if (bEditOrAdd && canAdd) {\n                  var tmp = { id: guidGenerator(), name: tabTitle };\n                  tmpTabsData.push(tmp);\n                } else if (!bEditOrAdd && canRename) {\n                  for (var i = 0; i < tabsData.length; i++) {\n                    if (tabsData[i].id === nSelItem.id) {\n                      tmpTabsData[i].name = tabTitle;\n                      break;\n                    }\n                  }\n                }\n              }\n              setTabsData(tmpTabsData);\n              setEditModalVisible(!editModalVisible);\n            }}>\n            <Text style={styles.textStyle}>OK</Text>\n          </TouchableHighlight>\n        </View>\n      </View>\n    </Modal>\n  );\n\n  const renderDragItem = ({ item, index, drag, isActive }) => {\n    return (\n      <TouchableOpacity\n        onPress={() => setNSelItem(item)}\n        onLongPress={drag}\n        style={[\n          styles.tabBtn,\n          { borderBottomColor: nSelItem.id === item.id ? '#008DD8' : 'white' }\n        ]}>\n        <Text style={{ color: nSelItem.id === item.id ? '#008DD8' : '#607380' }}>{item.name}</Text>\n        {enableTabDropdowns && (\n          <TouchableOpacity\n            onPress={() => {\n              setTabTitle(item.name);\n              setModalVisible(true);\n            }}\n            style={{ width: 20 }}>\n            {nSelItem.id === item.id && (\n              <Entypo name='chevron-down' color='#008DD8' size={20} style={{ marginLeft: 5 }} />\n            )}\n          </TouchableOpacity>\n        )}\n      </TouchableOpacity>\n    );\n  };\n\n  const renderNormalItem = ({ item, index }) => {\n    return (\n      <TouchableOpacity\n        onPress={() => setNSelItem(item.id)}\n        style={[styles.tabBtn, { borderBottomColor: nSelItem === item.id ? '#008DD8' : 'white' }]}>\n        <Text style={{ color: nSelItem === item.id ? '#008DD8' : '#607380' }}>{item.name}</Text>\n        {enableTabDropdowns && (\n          <TouchableOpacity\n            onPress={() => {\n              setTabTitle(item.name);\n              setModalVisible(true);\n            }}\n            style={{ width: 20 }}>\n            {nSelItem === item.id && (\n              <Entypo name='chevron-down' color='#008DD8' size={20} style={{ marginLeft: 5 }} />\n            )}\n          </TouchableOpacity>\n        )}\n      </TouchableOpacity>\n    );\n  };\n\n  const renderItem = ({ item, index, drag, isActive }) => {\n    return (\n      <TouchableOpacity\n        style={{\n          height: 100,\n          backgroundColor: isActive ? 'blue' : item.backgroundColor,\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}\n        onLongPress={drag}>\n        <Text\n          style={{\n            fontWeight: 'bold',\n            color: 'white',\n            fontSize: 32\n          }}>\n          {item.name}\n        </Text>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={[styles.container, style]}>\n        <View\n          style={{\n            alignItems: 'center',\n            justifyContent: 'center',\n            paddingHorizontal: 15,\n            flex: 1\n          }}>\n          {canDrag ? (\n            <DraggableFlatList\n              data={tabsData}\n              keyExtractor={(item, index) => index.toString()}\n              renderItem={renderDragItem}\n              onDragEnd={({ data }) => setTabsData(data)}\n              showsHorizontalScrollIndicator={false}\n              horizontal\n            />\n          ) : (\n            <FlatList\n              data={tabsData}\n              keyExtractor={(item, index) => index.toString()}\n              contentContainerStyle={{ alignSelf: 'center', flexDirection: 'row' }}\n              renderItem={renderNormalItem}\n              showsHorizontalScrollIndicator={false}\n              horizontal\n            />\n          )}\n        </View>\n        <TouchableOpacity\n          onPress={() => {\n            setTabTitle('');\n            setEditOrAdd(true);\n            setEditModalVisible(true);\n          }}\n          style={{ marginHorizontal: 5 }}>\n          <Entypo name='dots-three-horizontal' color='#607380' size={25} />\n        </TouchableOpacity>\n      </View>\n      {modalVisible && renderContextModal}\n      {editModalVisible && renderEditTabTitle}\n      {/* <View style={{ flex: 1 }}>\n        <DraggableFlatList\n          data={testData}\n          renderItem={renderItem}\n          keyExtractor={(item, index) => `draggable-item-${item.key}`}\n          onDragEnd={({ data }) => setTestData(data)}\n        />\n      </View> */}\n    </View>\n  );\n}\n\nconst MyComponentWrapper = ({ children }) => {\n  return (\n    <View\n    // style={{ borderWidth: 2, borderColor: 'green' }}\n    >\n      {children}\n    </View>\n  );\n};\n\nconst MyTabComponent = ({ children }) => {\n  return (\n    <View\n    // style={{ borderWidth: 2, borderColor: 'red' }}\n    >\n      {children}\n    </View>\n  );\n};\n\nFlexTabs.defaultProps = {\n  enableTabDropdowns: true,\n  canAdd: true,\n  canRename: true,\n  canDrag: true,\n  componentWrapper: MyComponentWrapper,\n  tabComponent: MyTabComponent\n};\n","import { StyleSheet, Platform, StatusBar } from 'react-native';\n\nexport default StyleSheet.create({\n  screen: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 10,\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 10,\n  },\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  domainHeaderSection: {\n    backgroundColor: 'grey',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n    padding: 10,\n    paddingRight: 5,\n    height: 40,\n    borderTopLeftRadius: 7,\n    borderBottomLeftRadius: 7,\n  },\n  domainPrefixColor: {\n    color: 'white',\n  },\n  domainPrefixSection: {\n    flex: 1,\n    backgroundColor: 'grey',\n    height: '100%',\n    flexWrap: 'wrap',\n  },\n  slashSection: {\n    backgroundColor: 'grey',\n    paddingHorizontal: 5,\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  slugTextSection: {\n    flex: 1,\n    color: 'white',\n    backgroundColor: 'grey',\n    height: 40,\n    paddingHorizontal: 5,\n    borderTopRightRadius: 7,\n    borderBottomRightRadius: 7,\n  },\n  buttonsSection: {\n    marginLeft: 10,\n    flexDirection: 'row',\n  }\n});","import React, { useState, useRef } from 'react';\nimport {\n  Button,\n  Clipboard,\n  ToastAndroid,\n  Alert,\n  Linking,\n  Platform,\n  Text,\n  TextInput,\n  View,\n  TouchableOpacity,\n  ViewStyle\n} from 'react-native';\nimport DropDownPicker from 'react-native-dropdown-picker';\nimport { Feather, MaterialCommunityIcons } from '@expo/vector-icons';\nimport { Modalize } from 'react-native-modalize';\n\nimport styles from './style';\n\ninterface domainPrefixProps {\n  key: string;\n  label: string;\n  value: string;\n}\n\nexport interface SlugFieldProps {\n  domainPrefix?: string;\n  domainPrefixItems: domainPrefixProps[];\n  showPrefixDropdown?: string;\n  value?: string;\n  showCopyButton?: string;\n  showLinkIcon?: boolean;\n  style?: ViewStyle;\n  placeholder?: string;\n  label: string;\n}\n\nexport function SlugField(props: SlugFieldProps) {\n  const {\n    domainPrefix,\n    domainPrefixItems,\n    showPrefixDropdown,\n    value,\n    showCopyButton,\n    showLinkIcon,\n    style,\n    placeholder,\n    label\n  } = props;\n\n  const [slugText, setSlugText] = useState(value);\n  const [domainPrefixText, setDomainPrefixText] = useState(domainPrefix);\n  const [timeText, setTimeText] = useState('');\n  const modalizeRef = useRef<Modalize>(null);\n  const [modalToggle, setModalToggle] = useState(true);\n\n  const onLinkCopyButton = () => {\n    const urlValue = 'http://' + domainPrefixText + '/' + slugText;\n    Clipboard.setString(urlValue);\n    if (Platform.OS === 'android') {\n      ToastAndroid.show('Copied the url', ToastAndroid.SHORT);\n    } else {\n      Alert.alert('Copied the url', urlValue);\n    }\n  };\n\n  const onLinkLaunchButton = () => {\n    const urlValue = 'http://' + domainPrefixText + '/' + slugText;\n    Linking.openURL(urlValue);\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={[styles.container, style]}>\n        <View style={styles.domainHeaderSection}>\n          <Text style={styles.domainPrefixColor}>https://</Text>\n        </View>\n        <View style={styles.domainPrefixSection}>\n          {Platform.OS === 'web' ? (\n            <DropDownPicker\n              items={domainPrefixItems}\n              defaultValue={domainPrefixText}\n              containerStyle={{ height: 40, width: '100%' }}\n              disabled={!showPrefixDropdown}\n              style={{\n                backgroundColor: 'grey',\n                borderWidth: 1,\n                borderColor: 'grey'\n              }}\n              labelStyle={{\n                justifyContent: 'flex-start',\n                color: 'white',\n                textAlign: 'left'\n              }}\n              dropDownStyle={{ backgroundColor: 'grey', alignItems: 'flex-start' }}\n              arrowColor='white'\n              onChangeItem={(item) => setDomainPrefixText(item.value)}\n            />\n          ) : (\n            <TouchableOpacity\n              onPress={() => modalizeRef.current?.open()}\n              style={{ justifyContent: 'center', height: 40 }}>\n              <Text numberOfLines={1} style={{ color: 'white' }}>\n                {domainPrefixText}\n              </Text>\n            </TouchableOpacity>\n          )}\n        </View>\n        <View style={styles.slashSection}>\n          <Text style={styles.domainPrefixColor}>/</Text>\n        </View>\n        <TextInput\n          style={styles.slugTextSection}\n          placeholderTextColor='#AAAAAA'\n          placeholder={placeholder}\n          autoCapitalize='none'\n          value={slugText}\n          onChangeText={(text) => setSlugText(text)}\n        />\n        <View style={styles.buttonsSection}>\n          {showCopyButton && (\n            <TouchableOpacity onPress={onLinkCopyButton}>\n              <Feather name='copy' color='grey' size={22} style={{ marginHorizontal: 3 }} />\n            </TouchableOpacity>\n          )}\n          {showLinkIcon && (\n            <TouchableOpacity onPress={onLinkLaunchButton}>\n              <MaterialCommunityIcons\n                name='launch'\n                color='grey'\n                size={25}\n                style={{ marginHorizontal: 3 }}\n              />\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n      <Modalize ref={modalizeRef} adjustToContentHeight={modalToggle}>\n        <View style={{ padding: 20 }}>\n          {domainPrefixItems &&\n            domainPrefixItems.map((item, index) => (\n              <Button\n                key={item.key.toString()}\n                title={item.label}\n                onPress={() => {\n                  setDomainPrefixText(item.value);\n                  modalizeRef.current?.close();\n                }}\n              />\n            ))}\n        </View>\n      </Modalize>\n    </View>\n  );\n}\n\nSlugField.defaultProps = {\n  showCopyButton: true,\n  showLinkIcon: true\n};\n","import { StyleSheet, Platform, StatusBar } from 'react-native';\n\nexport default StyleSheet.create({\n  screen: {\n    flex: 1,\n    backgroundColor: 'white',\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 10,\n  },\n  scrollViewWrapper: {\n    borderBottomWidth: 2,\n    borderBottomColor: '#E7EEF2',\n    borderTopWidth: 2,\n    borderTopColor: '#E7EEF2',\n    flexDirection: 'row',\n  },\n  container: {\n    justifyContent: 'space-between',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 10,\n  },\n  leftItemsSection: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  logoImg: {\n    width: 120,\n    height: 60,\n    marginHorizontal: 5\n  },\n  toolbarTitleText: {\n    color: '#607380',\n    paddingHorizontal: 15,\n  },\n  rightItemsSection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  publishBtn: {\n    backgroundColor: '#F35564',\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 20,\n    marginHorizontal: 5,\n  },\n  publishBtnText: {\n    color: 'white'\n  },\n  userAvatarPart: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  userAvatarImg: {\n    width: 40,\n    height: 40,\n    marginHorizontal: 5,\n  },\n  rightItemElement: {\n    marginHorizontal: 5,\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22,\n    marginHorizontal: 30,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n    width: '100%',\n  },\n  closeButton: {\n    backgroundColor: \"#2196F3\",\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    width: '100%',\n    marginTop: 15,\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalTitle: {\n    marginBottom: 15,\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  modalEdiTitleInput: {\n    width: '100%',\n    height: 40,\n    borderColor: 'grey',\n    borderWidth: 1,\n    paddingHorizontal: 10,\n    borderRadius: 10,\n  },\n});","import React, { useState } from 'react';\nimport { Image, Modal, Platform, Text, TextInput, View, TouchableOpacity } from 'react-native';\nimport { Entypo, Feather, MaterialCommunityIcons } from '@expo/vector-icons';\nimport styles from './style';\n\nexport interface ToolBarProps {\n  name?: string;\n  leftItems?: object[];\n  title: string;\n  rightItems?: object[];\n}\n\nexport function ToolBar(props: ToolBarProps) {\n  const { name, leftItems, title, rightItems } = props;\n  const [titleModalVisible, setTitleModalVisible] = useState(false);\n  const [titleText, setTitleText] = useState(title);\n\n  const renderTitleEditModal = (\n    <Modal animationType='slide' transparent visible={titleModalVisible} onRequestClose={() => {}}>\n      <View style={styles.centeredView}>\n        <View style={styles.modalView}>\n          <Text style={styles.modalTitle}>ToolBar Title</Text>\n          <TextInput\n            style={styles.modalEdiTitleInput}\n            onChangeText={(text) => setTitleText(text)}\n            value={titleText}\n            placeholder='Title'\n            maxLength={30}\n          />\n          <TouchableOpacity style={styles.closeButton} onPress={() => setTitleModalVisible(false)}>\n            <Text style={styles.textStyle}>OK</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.container}>\n        <View style={styles.leftItemsSection}>\n          <TouchableOpacity>\n            <Feather name='align-justify' size={30} color='#9EA9B1' />\n          </TouchableOpacity>\n          {Platform.OS === 'web' && (\n            <Image\n              source={require('./ambid_logo.png')}\n              resizeMode='contain'\n              style={styles.logoImg}\n            />\n          )}\n        </View>\n        <TouchableOpacity onLongPress={() => setTitleModalVisible(true)}>\n          <Text style={styles.toolbarTitleText}>{titleText}</Text>\n        </TouchableOpacity>\n        <View>\n          {Platform.OS === 'web' && (\n            <View style={styles.rightItemsSection}>\n              <Feather name='search' size={25} color='#9EA9B1' style={styles.rightItemElement} />\n              <MaterialCommunityIcons\n                name='account-plus-outline'\n                size={30}\n                color='#9EA9B1'\n                style={styles.rightItemElement}\n              />\n              <TouchableOpacity style={styles.publishBtn}>\n                <Text style={styles.publishBtnText}>PUBLISH</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.userAvatarPart}>\n                <Image\n                  source={require('./ambid_user.png')}\n                  resizeMode='contain'\n                  style={styles.userAvatarImg}\n                />\n                <Entypo name='chevron-down' size={20} color='#9EA9B1' />\n              </TouchableOpacity>\n            </View>\n          )}\n        </View>\n      </View>\n      {titleModalVisible && renderTitleEditModal}\n    </View>\n  );\n}\n\nToolBar.defaultProps = {\n  showCopyButton: true,\n  showLinkIcon: true\n};\n","import { StyleSheet, Platform, StatusBar } from 'react-native';\n\nexport default StyleSheet.create({\n  screen: {\n    flex: 1,\n    backgroundColor: 'white',\n    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 15,\n  },\n  container: {\n    flexDirection: 'row',\n  },\n  barSection: {\n    height: '100%',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  iconCircle: {\n    width: 28,\n    height: 28,\n    borderRadius: 14,\n    backgroundColor: '#49A6E9',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  timelineBar: {\n    flex: 1,\n    width: 3,\n    backgroundColor: '#49A6E9',\n  },\n  descriptionSection: {\n    flexDirection: 'column',\n    marginLeft: 7,\n  },\n  dateText: {\n    marginVertical: 5,\n    color: 'darkgrey',\n  },\n  textPart: {\n    borderColor: '#F1F1F1',\n    borderWidth: 2,\n    width: '100%',\n    padding: 10,\n    marginBottom: 20,\n    marginTop: 5,\n  },\n  title: {\n    color: 'dimgrey',\n    fontWeight: 'bold',\n  },\n  content: {\n    marginTop: 5,\n    color: 'darkgrey',\n  },\n});","import React from 'react';\nimport { ScrollView, Text, View, ViewStyle } from 'react-native';\n\nimport styles from './style';\n\ninterface dataProps {\n  title: string;\n  subTitle: string;\n  date: string;\n  icon: object;\n}\n\nexport interface TimelineProps {\n  type?: string;\n  data?: dataProps[];\n  style?: ViewStyle;\n  barColor?: string;\n  barStyle?: ViewStyle;\n  lineColor?: string;\n  lineStyle?: ViewStyle;\n}\n\nexport function Timeline(props: TimelineProps) {\n  const { type, data, style, barColor, barStyle, lineColor, lineStyle } = props;\n\n  const renderTimeline = () => {\n    return (\n      <>\n        {data &&\n          data.map((item, index) => (\n            <View key={index} style={styles.container}>\n              <View style={styles.barSection}>\n                <View style={[styles.iconCircle, { backgroundColor: barColor }]}>{item.icon}</View>\n                <View style={[styles.timelineBar, { backgroundColor: barColor }]} />\n              </View>\n              <View style={styles.descriptionSection}>\n                <Text style={styles.dateText}>{item.date}</Text>\n                <View style={styles.textPart}>\n                  <Text style={styles.title}>{item.title}</Text>\n                  <Text style={styles.content}>{item.subTitle}</Text>\n                </View>\n              </View>\n            </View>\n          ))}\n      </>\n    );\n  };\n\n  return (\n    <View style={[styles.screen, style]}>\n      <ScrollView style={{ paddingHorizontal: 15 }}>\n        {type === 'VERTICAL' && renderTimeline()}\n      </ScrollView>\n    </View>\n  );\n}\n\nTimeline.defaultProps = {\n  type: 'VERTICAL'\n};\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","import '@storybook/addon-ondevice-actions/register';\nimport '@storybook/addon-ondevice-knobs/register';\nimport '@storybook/addon-ondevice-notes/register';\nimport '@storybook/addon-ondevice-backgrounds/register';","import React from 'react';\nimport { storiesOf, addParameters } from '@storybook/react-native';\nimport { action } from '@storybook/addon-actions';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Selector } from '../../../components/Selector';\n\nconst selectorArray = [\n  {\n    id: 'none',\n    icon: <MaterialIcons name='block' size={30} color='#9D9D9D' />,\n    label: 'NONE',\n  },\n  {\n    id: 'border',\n    icon: <MaterialIcons name='border-outer' size={30} color='#9D9D9D' />,\n    label: 'SOLID',\n  },\n  {\n    id: 'dashed',\n    icon: <MaterialIcons name='border-clear' size={30} color='#9D9D9D' />,\n    label: 'DASHED',\n  },\n  {\n    id: 'align-center',\n    icon: <MaterialIcons name='format-align-center' size={30} color='#9D9D9D' />,\n    label: 'align-center',\n  },\n  {\n    id: 'align-justify',\n    icon: <MaterialIcons name='format-align-justify' size={30} color='#9D9D9D' />,\n    label: 'align-justify',\n  },\n  {\n    id: 'align-left',\n    icon: <MaterialIcons name='format-align-left' size={30} color='#9D9D9D' />,\n    label: 'align-left',\n  },\n  {\n    id: 'align-right',\n    icon: <MaterialIcons name='format-align-right' size={30} color='#9D9D9D' />,\n    label: 'align-right',\n  },\n];\n\nstoriesOf('Fancy', module)\n  .add('Selector', () => (\n    <Selector\n      items={selectorArray}\n      onChange={() => console.log('onChange clicked')} />),\n    {\n      notes: `\n      # FancySelector\\n\n      ## Description\n        * A tool that lets users select from a collection of items\n        * Can add a series of icons/labels or custom components that can be selected\\n\n      ## Props\n        ##### items:array\n        * An array items (label, component) to show\n        * the \"component\" used is often the <Icon /> component\\n\n      ## Events\n        * onChange\\n\n        Triggers when one of the items is selected\\n\n      ## Icon\n        ##### Props\n          * icon:string\n            The name of the icon to render\n          * caption:string\n            The caption to show\n          * highlighted:bool\n            > Whether or not the Icon should be highlighted\\n\n            > Useful for indicating that an item has already been selected\\n\n        ##### Tests\n          * The component should render in the dom\n          * The component should show the icon provided in the props\n          * The component should show the caption provided in the props\n          * The component should be highlighted if the highlighted prop is true\\n\n      ## Hooks\n        * onFancySelectorRender()\n          Triggers the plugin hook when the FancySelector component is rendering\\n\n        * onFancySelectorChange()\n          Triggers this plugin hook when an item is selected\\n\n      ## Tests\n        * Should render the component in the dom\n        * Should show a list of items. The number of items should match the number of items in the array prop\n        * Should trigger the onChange() event when one of the items is selected\n        * Should trigger the \"onFancySelectorRender\" plugin hook when the FancySelector component is rendering\n        * Should trigger the \"onFancySelectorChange\" plugin hook when an item is selected\n      `\n    }\n  );\n","import React from 'react';\nimport { storiesOf } from '@storybook/react-native';\n\nimport { FlexTabs } from '../../../components/FlexTabs';\n\nstoriesOf('Fancy', module)\n  .add('FlexTabs', () => (\n    <FlexTabs\n      name='flextab'\n      tabs={[\n        { id: 1, name: 'Builder' },\n        { id: 2, name: 'Calendar' },\n        { id: 3, name: 'Insights' },\n        { id: 4, name: 'Moments' },\n        { id: 5, name: 'About' },\n        { id: 6, name: 'Terminal' },\n      ]}\n      enableTabDropdowns={true}\n      tabActions={[\n        { label: 'Rename', onSelect: () => console.log('onSelect clicked') },\n        { label: 'Duplicate', onSelect: () => console.log('onSelect clicked') },\n        { label: 'Delete', onSelect: () => console.log('onSelect clicked') },\n      ]}\n      canRename={true}\n      canAdd={true}\n      canDrag={true}\n      style={{ marginTop: 0 }} />\n  ), {\n    notes: `\n      # FlexTabs\n      ## Description\n        * An advanced, flexible tabs/tab manager\\n\n      ## User Stories\n        * As a user I would like to see a list of tabs so I can toggle between content\n        * As a user I would like the option to rename a tab\n        * As a user I would like the option to re-order the tabs using drag/drop\n        * As a user I would like the option to add new tabs to the list\n        * As a user I would like the option to have a dropdown menu on my tabs so I can perform custom actions about that tab\n        * As a user if I have more tabs than the container can fit, I would like my tabs to be a small carousel that I can use to toggle left/right to see hidden tabs\n        * As a developer I would like to style my tabs\n        * As a developer I would like to replace my tab containers\n      ## Props\n        * name:string\\n\n          The name of the tab list\n        * tabs:array\n          The list of tabs to show \n          { id, name, caption, icon, isActive, customAction, style }\n        * enableTabDropdowns:bool\n          Whether or not the tabs have a dropdown menu of actions\n        * enableContextMenu:bool\n          Whether or not the user can trigger the tab action dropdown via right-click\n        * tabActions:array\n          The list of actions that are avaiable for each tab to take (will show in the dropdown)\n          { id, label, icon, onSelect }\n        * canRename:bool\n          Whether or not the tabs can be renamed\n        * canDrag:bool\n          Whether or not the tabs can be dragged/re-ordered\n        * overflow:enum\n          The action to take when there are more tabs than the container permits\n          enum(HIDDEN, CAROUSEL)\n        * canAdd:bool\n          Whether or not an add button is showing that allows the creation of more tabs\n          componentWrapper:element\n          The component to use (instead of the default) to wrap each tab item\n        * style:object\n          The style to apply to the tab container\n        * tabComponent:element\n          The component to use (instead of the default) to replace each tab item\n        * vertical:bool\n          Whether the tabs should appear vertically or not\n      ## Events\\n\n        * onTabSwitch()\\n\n          Triggers when the tab is switched\\n\n        * onTabRename()\n          Triggers when the tab is renamed\\n\n        * onTabDelete()\n          Triggers when the tab is deleted\\n\n        * onTabCreate()\n          Triggers when a tab is created\\n\n      ## Methods\n        * switchTab()\n          Switches the tab from one to another\\n\n      ## Hooks\n        * onComponentRender()\\n\n          FlexTabs\n          Triggers when the tabs are being rendered\n        * onListItems()\\n\n          TabList\\n\n          Triggers when the tab list is being generated\\n\n          TabActions\\n\n          Triggers when the list of tab actions are being generated\\n\n        * onEventTrigger()\\n\n          TabSwitch\n          Triggers when a tab is switched\\n\n          TabRename\n          Triggers when a tab is renamed\\n\n          TabDelete\n          Triggers when a tab is deleted\\n\n          TabCreate\n          Triggers when a tab is created\\n\n      ## Tests\n        #### Rendering\n          * Should render the component in the dom\n          * Should render a list of tabs in the dom that number the same as the number of tabs in the tabs array prop\n          * Should render each tab with a caption that matches the tab item associated with that tab in the tabs array prop\n          * Should render each tab with an icon (if one is present) that matches the tab item associated with that tab in the tabs array prop\n          * Should render the tab as \"active\" it the tab in the tabs array prop has the isActive property set to true\n          * Should render a dropdown of actions where the number of actions match the number of items in the tabActions prop\n          * Should render a dropdown of actions on each tab if the enableTabDropdowns prop is set to true\n          * Should render a dropdown of actions that are activated on right-click if the enableContextMenu prop is set to true\n          * Should not permit renaming if the canRename prop is false\n          * Should not permit re-ordering if the canDrag prop is false\n          * Should not permit adding new tabs if the canAdd prop is false\n          * Should render the tabs as a carousel when the number of tabs exceed the number that can fit on the screen\n          * Should render the tabs normally with the overflow tabs hidden if the overflow prop is set to HIDDEN\n          * Should render the component in the componentWrapper prop if one is provided\n          * Should render the component in the tabComponent prop if one is provided\n          * Should render the same number of tabComponent props as the amount of tabs in the tabs array prop\n          * Should render the tabs as vertical if the vertical prop is set to true\n        #### Events\n          * Triggers the onTabSwitch() event when the tab is switched\n          * Triggers the onTabRename() event when the tab is renamed\n          * Triggers the onTabDelete() event when the tab is deleted\n          * Triggers the onTabCreate() event when a tab is created\n          * Triggers the onSelect() action in the tab action prop if the tab dropdown action is selected\n        #### Methods\n          * Should switch the tab from one to another\n        #### Hooks\n          * Triggers the onComponentRender(\"FlexTabs\") plugin hook when the component is being rendered\n          * Triggers the onListItems(\"TabList\") when the tab list is being generated\n          * Triggers the onListItems(\"TabActions\") plugin hook when the tab actions are being generated\n          * Triggers the onEventTrigger(\"TabSwitch\") plugin hook when a tab is switched\n          * Triggers the onEventTrigger(\"TabRename\") plugin hook when a tab is renamed\n          * Triggers the onEventTrigger(\"TabDelete\") plugin hook when a tab is deleted\n          * Triggers the onEventTrigger(\"TabCreate\") plugin hook when a tab is created\n    `\n  });\n","import React from 'react';\nimport { storiesOf } from '@storybook/react-native';\n\nimport { SlugField } from '../../../components/SlugField';\n\nstoriesOf('Fancy', module)\n  .add('SlugField', () => (\n    <SlugField\n      domainPrefix='www.google.com'\n      domainPrefixItems={[\n        { key: 1, label: 'www.linkedin.com', value: 'www.linkedin.com' },\n        { key: 2, label: 'www.google.com', value: 'www.google.com' },\n        { key: 3, label: 'www.facebook.com', value: 'www.facebook.com' },\n      ]}\n      showPrefixDropdown={true}\n      placeholder='My-slug-name'\n      value=''\n      showCopyButton={true}\n      showLinkIcon={true}\n    />\n  ), {\n    notes: `\n      # SlugField\n      ## Description\n        * A custom, user-friendly input field for collecting url slugs\\n\n      ## User Stories\n        * As a user I would like to see a list of tabs so I can toggle between content\n        * As a user I would like the option to rename a tab\n        * As a user I would like the option to re-order the tabs using drag/drop\n        * As a user I would like the option to add new tabs to the list\n        * As a user I would like the option to have a dropdown menu on my tabs so I can perform custom actions about that tab\n        * As a user if I have more tabs than the container can fit, I would like my tabs to be a small carousel that I can use to toggle left/right to see hidden tabs\n        * As a developer I would like to style my tabs\n        * As a developer I would like to replace my tab containers\\n\n      ## Props\n        * domainPrefix:string\\n\n          The domain prefix to use for the slug\\n\n        * domainPrefixItems:array\\n\n          The list of domain prefixes that the user can choose from\\n\n        * showPrefixDropdown:bool\\n\n          Whether or not the prefix dropdowns should be enabled\\n\n        * value:string\\n\n          The value of the slug\\n\n        * showCopyButton:bool\\n\n          Whether or not a [copy] to clipboard button is showing\\n\n        * showLinkIcon:bool\\n\n          Whether or not a [link] icon is showing\\n\n        * style:object\\n\n          The style to use for the container\\n\n        * placeholder:string\\n\n          The placeholder to use for the slug text field\\n\n        * label:string\\n\n          The label to use for the input field\\n\n      ## Events\\n\n        * onChange()\\n\n          Triggers when the slug text field changes\\n\n        * onFocus()\\n\n          Triggers when the slug text field is focused on\\n\n        * onBlur()\\n\n          Triggers when the slug text field gets a blur event\\n\n      ## Tests\n        #### Rendering\n          * Should render in the dom\n          * Should show the domainPrefix value in the dom\n          * Should show a list of domain prefixes in a dropdown with the number matching the number of items in the domainPrefixItems prop\n          * Should not render a dropdown when the showPrefixDropdown prop is false\n          * Should show a [copy] button if the showCopyButton prop is true\n          * Should link the chosen domain prefix and slug value if provided (link icon href should match prop)\n          * Should render the label prop in the dom if provided\n        #### Actions\n          * Should copy the slug value to the clipboard if the [copy] button is clicked\n        #### Events\n          * Should trigger the onChange() event when the slug text field changes\n          * Should trigger the onFocus() event when the slug text field is focused on\n          * Should trigger the onBlur() event when the slug text field gets a blur event\n    `\n  });\n","import React from 'react';\nimport { storiesOf } from '@storybook/react-native';\n\nimport { ToolBar } from '../../../components/ToolBar';\n\nstoriesOf('Fancy', module)\n  .add('ToolBar', () => (\n    <ToolBar\n      title='Project Name > Object Name'\n    />\n  ), {\n    notes: `\n      # ToolBar\n      ## Description\n        * A flexible way to show and customize a toolbar\\n\n      ## Props\n        * name:string\n        * leftItems:arrayOfElements\n        * title:string\n        * children:element\n        * rightItems:arrayOfElements\\n\n      ## Toolbar Components\n        * AppBar\n        * Logo\n        * Avatar\n        * RenamableTitle\n        * Search\n        * Hooks\\n\n      ## Hooks\n        * onComponentRender()\\n\n          Toolbar\n          Triggers when the Toolbar is rendering\\n\n        * onListItems()\\n\n          ToolbarLeftItems\n          Triggers when the list of Toolbar Left Items are being generated\\n\n          ToolbarRightItems\n          Triggers when the list of Toolbar Right Items are being generated\\n\n      ## Tests\n        #### Rendering\n          * Should render the component in the dom\n          * Should show the same number of items in the left side of the toolbar as the number of items in the leftItems prop\n          * Should show the same number of items in the right side of the toolbar as the number of items in the rightItems prop\n          * Should show a title if one is provided\n          * Should show a child element if one is provided\n        #### Hooks\n          * Should trigger the onComponentRender(\"Toolbar\") plugin hook when the Toolbar is rendering\n          * Should trigger the onListItems(\"ToolbarLeftItems\") plugin hook when the list of Toolbar Left Items are being generated\n          * Should trigger the onListItems(\"ToolbarRightItems\") plugin hook when the list of Toolbar Right Items are being generated\n    `\n  });\n","module.exports = __webpack_public_path__ + \"static/media/ambid_logo.a7d54244.png\";","module.exports = __webpack_public_path__ + \"static/media/ambid_user.cc464be0.png\";","import React from 'react';\nimport { storiesOf } from '@storybook/react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Timeline } from '../../../components/Timeline';\n\nconst timelineArray = [\n  {\n    title: 'Completed profile data',\n    titleStyle: null,\n    subTitleStyle: null,\n    dateStart: null,\n    dateEnd: null,\n    iconStyle: null,\n    contentStyle: null,\n    tooltip: null,\n    cardContainer: null,\n    zIndex: 1,\n    subTitle: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n    date: 'Jan 25, 2020',\n    icon: <MaterialIcons name='check' size={17} color='white' />,\n  },\n  {\n    title: 'Completed profile data',\n    subTitle: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n    date: 'Jan 25, 2020',\n    icon: <MaterialIcons name='drafts' size={17} color='white' />,\n  },\n  {\n    title: 'Completed profile data',\n    subTitle: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n    date: 'Jan 25, 2020',\n    icon: <MaterialIcons name='edit' size={17} color='white' />,\n  },\n  {\n    title: 'Completed profile data',\n    subTitle: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n    date: 'Jan 25, 2020',\n    icon: <MaterialIcons name='launch' size={17} color='white' />,\n  },\n  {\n    title: 'Completed profile data',\n    subTitle: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n    date: 'Jan 25, 2020',\n    icon: <MaterialIcons name='lock' size={17} color='white' />,\n  },\n  {\n    title: 'Completed profile data',\n    subTitle: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n    date: 'Jan 25, 2020',\n    icon: <MaterialIcons name='notifications-active' size={17} color='white' />,\n  },\n];\n\nstoriesOf('Fancy', module)\n  .add('Timeline', () => (\n    <Timeline\n      data={timelineArray}\n      type='VERTICAL'\n      barColor='#49A6E9'\n      lineColor='#49A6E9' />\n  ), {\n    notes: `\n      # Activity Timeline\n      ## Description\n        * A custom component for showing activity overlaid on a timeline\\n\n      ## Screens/States\n        * BEAUTIFUL\\n\n        * VERTICAL\\n\n      ## Props\n        * type:enum\\n\n          enum(VERTICAL, BEAUTIFUL)\n        * data:array\n          { title, titleStyle, subTitle, subTitleStyle, dateStart, dateEnd, icon, iconStyle, contentStyle, toolTip, cardContainer, zIndex }\n        * style:object\n          The style to use for the timeline\n        * barColor:string\n          The color (hex) of the bar\n        * barStyle:object\n          The style to use for the bar\n        * lineColor:string\n          The color (hex) of the line\n        * lineStyle:object\n          The style to use for the line\n      ## Events\\n\n        * onEventClick()\\n\n        Triggers when an event is clicked on\\n\n      ## Hooks\n        * onComponentRender()\\n\n          ActivityTimeline\n          Triggers when the ActivityTimeline component is being rendered\n        * onListItems()\\n\n          ActivityTimelineEvents\n          Triggers when the list of events are being generated\\n\n        * onEventTrigger()\\n\n          ActivityTimelineEventClick\n          Triggers when an event is clicked on\\n          \n      ## Tests\n        #### Rendering\n          * Should render in the dom\n          * Should show the same number of events as there are items in the data prop array\n          * Should render each event with a title matching the value in its data array item\n          * Should render the title for each event with a style matching the value in its data array item\n          * Should render each event with a subtitle matching the value in its data array item\n          * Should render the subtitle for each event with a style matching the value in its data array item\n          * Should render the start and end dates for each event positioned at a location matching the values in its data array item\n          * Should render an icon for each event that matches the value in its data array item\n          * Should render the icon for each event with a style matching the iconStyle value in its data array item\n          * Should render each activity event with the zIndex order provided in its data array item\n          * Should show the timeline using the style provided in the style props\n          * Should show the bars in the provided color\n          * Should show the bars using the style provided int he style props\n          * Should show the lines in the provided color\n          * Should show the lines using the style provided int he style props\n        #### Events\n          * Should trigger the onEventClick() event when an event is clicked on Hooks\n        #### Hooks\n          * Should trigger the onComponentRender(\"ActivityTimeline\") plugin hook when the component is being rendered in the dom\n          * Should trigger the onListItems(\"ActivityTimelineEvents\") plugin hook when the list of events are bieng generated\n          * Should trigger the onEventTrigger(\"ActivityTimeilneEventClick\") plugin hook when an event is being clicked on\n          \n    `\n  });\n","import React from 'react';\nimport { storiesOf } from '@storybook/react-native';\n\nimport { TaskCard } from '../../../components/TaskCard';\n\nstoriesOf('Fancy', module)\n  .add('TaskCard', () => (\n    <>\n      <TaskCard\n        icon='check-circle'\n        title='Watch Getting Started Video'\n        message='Lorem ipsum dolor sit amet, consectetur adipiscing elit,'\n        // color='red'\n        buttonIsVisible={true}\n        // buttonComponent={<View />}\n        buttonHref='https://www.google.com'\n        buttonLabel='Button' />\n      <TaskCard\n        icon='apple-icloud'\n        title='Publish first funnel'\n        message='Donec aliquet ipsum vel vehicula'\n        color='#2C8AC8'\n        href='https://www.google.com'\n        buttonIsVisible={true}\n        buttonLabel='Cloud' />\n      <TaskCard\n        icon='compass-outline'\n        title='Blog title goes here'\n        message='Lorem ipsum sit dolor amet...'\n        color='#E06969'\n        buttonIsVisible={false} />\n    </>\n  ), {\n    notes: `\n      # TaskCard\n      ## Description\n        * A card designed for showing simple tasks\\n\n      ## Props\n        * icon:string\\n\n          The icon to use for the card\n        * children:element\\n\n          The inner content to use in the card\n        * title:string\\n\n          The title to use for the card\n        * message:string\\n\n          The content to use in the card\n        * color:string\\n\n          The color of the card's border\n        * href:string\\n\n          The url to link to when the card is clicked\n        * buttonIsVisible:bool\\n\n          Whether or not an action button should show\n        * buttonHref:string\\n\n          The url to link to when the button is clicked\n        * buttonLabel:string\\n\n          The label to use for the button\n        * buttonComponent:element\\n\n          The component to use for a button instead of the default button\\n\n      ## Events\\n\n        * onButtonClick()\\n\n        Triggers when the button is clicked\\n\n      ## Hooks\n        * onComponentRender()\\n\n          TaskCard\n          Triggers when the component renders in the dom\n        * onEventTrigger()\\n\n          TaskCardButtonClick\n          Triggers when the button in a Task Card is clicked\\n\n      ## Tests\n        #### Rendering\n          * Should render in the dom\n          * Should show the icon in the icon props in the dom\n          * Should show a title if one is provided in the title props\n          * Should show a message if one is provided in the message props\n          * Should show the card with the border color that is found in the color prop\n          * Should link to the url in the href prop if one is provided\n          * Should show a button if the buttonIsVisible prop is true\n          * Should link the button to the url in the buttonHref prop\n          * Should render the component in the buttonComponent prop instead of the default button if one is provided\n        #### Events\n          * Should trigger the onButtonClick() event when the button is clicked\n        #### Hooks\n          * Should trigger the onComponentRender(\"TaskCard\") plugin hook when the\n          component renders in the dom\n          * Should trigger the onEventTrigger(\"TaskCardButtonClick\") plugin hook when the\n          button in the task card is clicked\n    `\n  });\n","import { action } from '@storybook/addon-actions';\nimport { text } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react-native';\nimport React from 'react';\nimport { Text } from 'react-native';\nimport Button from '.';\nimport CenterView from '../CenterView';\n\nstoriesOf('Button', module)\n  .addDecorator((getStory) => <CenterView>{getStory()}</CenterView>)\n  .add('with text', () => (\n    <Button onPress={action('clicked-text')}>\n      <Text>{text('Button text', 'Hello Button')}</Text>\n    </Button>\n  ))\n  .add('with some emoji', () => (\n    <Button onPress={action('clicked-emoji')}>\n      <Text>😀 😎 👍 💯</Text>\n    </Button>\n  ));\n","import React from 'react';\nimport { linkTo } from '@storybook/addon-links';\nimport { storiesOf } from '@storybook/react-native';\nimport Welcome from '.';\n\nstoriesOf('Welcome', module).add('to Storybook', () => <Welcome showApp={linkTo('Button')} />);\n","import React from 'react';\nimport { Text, View } from 'react-native';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\n// import { DocsPage, DocsContainer } from '@storybook/addon-docs/blocks';\n\nimport { storiesOf, addDecorator, addParameters } from '@storybook/react-native';\nimport { action } from '@storybook/addon-actions';\nimport { linkTo } from '@storybook/addon-links';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { withBackgrounds } from '@storybook/addon-ondevice-backgrounds';\n\nimport knobsWrapper from './Knobs';\nimport CenterView from './CenterView';\nimport Welcome from './Welcome';\n// import Selector from './Selector';\nimport './Fancy/Selector.stories';\n// import FlexTabs from './FlexTabs';\nimport './Fancy/FlexTabs.stories';\n// import SlugField from './SlugField';\nimport './Fancy/SlugField.stories';\n// import ToolBar from './ToolBar';\nimport './Fancy/ToolBar.stories';\n// import Timeline from './Timeline';\nimport './Fancy/Timeline.stories';\n// import TaskCard from './TaskCard';\nimport './Fancy/TaskCard.stories';\nimport './Button/Button.stories';\nimport './Welcome/Welcome.stories';\n\naddDecorator(withBackgrounds);\n\naddParameters({\n  backgrounds: [\n    { name: 'dark', value: '#222222' },\n    { name: 'white', value: '#ffffff', default: true },\n  ],\n});\n\n// storiesOf('Welcome', module)\n//   .addParameters({\n//     component: Welcome,\n//   })\n//   .add('to Storybook', () => <Welcome showApp={linkTo('Button')} />, {\n//     notes: `\n//             # Markdown!\\n\n//               * List Item\n//               * [List Item with Link](https://storybook.js.org)\n//             `,\n//   });\n\n// storiesOf('Button', module)\n//   .addParameters({\n//     component: Button,\n//   })\n//   .addParameters({\n//     backgrounds: [\n//       { name: 'dark', value: '#222222' },\n//       { name: 'light', value: '#eeeeee', default: true },\n//     ],\n//     notes: `\n//               # Custom note\\n\n//               _This component doesn't look right_\n//             `,\n//   })\n//   .addDecorator((getStory) => <CenterView>{getStory()}</CenterView>)\n//   .add('with text', () => (\n//     <Button onPress={action('clicked-text')}>\n//       <Text>Hello Button</Text>\n//     </Button>\n//   ))\n//   .add('with some emoji', () => (\n//     <Button onPress={action('clicked-emoji')}>\n//       <Text>😀 😎 👍 💯</Text>\n//     </Button>\n//   ));\n\n// storiesOf('Knobs', module).addDecorator(withKnobs).add('with knobs', knobsWrapper);\n\n// const globalParameter = 'globalParameter';\n// const chapterParameter = 'chapterParameter';\n// const storyParameter = 'storyParameter';\n\n// addParameters({ globalParameter });\n\n// storiesOf('Core|Parameters', module)\n//   .addParameters({ chapterParameter })\n//   .add(\n//     'passed to story',\n//     ({ parameters }) => <Text>Parameters are {JSON.stringify(parameters)}</Text>,\n//     {\n//       storyParameter,\n//     }\n//   );\n\n// storiesOf('Welcome', module).add('to Storybook', () => <Welcome showApp={linkTo('Button')} />);\n\n// storiesOf('Button', module)\n//   .addDecorator((getStory) => <CenterView>{getStory()}</CenterView>)\n//   .add('with text', () => (\n//     <Button onPress={action('clicked-text')}>\n//       <Text>Hello Button</Text>\n//     </Button>\n//   ))\n//   .add('with some emoji', () => (\n//     <Button onPress={action('clicked-emoji')}>\n//       <Text>😀 😎 👍 💯</Text>\n//     </Button>\n//   ));\n"],"sourceRoot":""}